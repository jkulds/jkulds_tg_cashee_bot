import os
import json
import pandas as pd

from collections import defaultdict
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)
from datetime import datetime

API_KEY = os.environ['API_KEY']

DATA_FILE = "expenses_data.json"

if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as file:
        user_expenses = json.load(file)
else:
    user_expenses = {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
    with open(DATA_FILE, "w") as file:
        json.dump(user_expenses, file, indent=4)

MAIN_MENU = ReplyKeyboardMarkup(
    [["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º"],["–≠–∫—Å–ø–æ—Ä—Ç"]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–∏—è.",
        reply_markup=MAIN_MENU
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    text = update.message.text

    if text in ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º", "–≠–∫—Å–ø–æ—Ä—Ç"]:
        await handle_button_click(update, context, text)
    else:
        await handle_user_input(update, context, text)

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = str(update.effective_user.id)
    if text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = generate_stats(user_id)
        await update.message.reply_text(stats)
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º":
        stats = generate_monthly_stats(user_id)
        await update.message.reply_text(stats)
    elif text == "–≠–∫—Å–ø–æ—Ä—Ç":
        await export_statistics(update)

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    if user_id not in user_expenses:
        user_expenses[user_id] = []
        save_data()

    try:
        amount, category = text.split(maxsplit=1)
        if (len(category) == 0):
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
            return
        
        amount = float(amount)
        date = datetime.today().strftime('%d.%m.%Y')
        isExpense = amount < 0
        if isExpense:
            user_expenses[user_id].append({"type": "expense", "amount": -amount, "category": category, "date": date})
        else:
            user_expenses[user_id].append({"type": "income", "amount": amount, "category": category, "date": date})

        message = "—Ä–∞—Å—Ö–æ–¥" if isExpense else "–¥–æ—Ö–æ–¥"
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω {message}: {amount} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'", reply_markup=MAIN_MENU)
        save_data()
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

def generate_stats(user_id: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    expenses = user_expenses.get(user_id, [])
    if not expenses:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    
    total_expenses = sum(item["amount"] for item in expenses)
    categories = {}
    for item in expenses:
        categories[item["category"]] = categories.get(item["category"], 0) + item["amount"]
    
    category_stats = "\n".join([f"{cat}: {amt}" for cat, amt in categories.items()])
    return f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_expenses}\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{category_stats}"

def generate_monthly_stats(user_id: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    expenses = user_expenses.get(user_id, [])
    if not expenses:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

    monthly_stats = defaultdict(lambda: defaultdict(float))
    for item in expenses:
        date = datetime.strptime(item["date"], '%d.%m.%Y')
        month_key = date.strftime('%Y.%m')  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É
        monthly_stats[month_key][item["category"]] += item["amount"]

    report = []
    for month, categories in sorted(monthly_stats.items()):
        report.append(f"\nüìÖ {month}")
        for category, amount in categories.items():
            report.append(f"  {category}: {amount:.2f}")
    return "\n".join(report)

async def export_statistics(update: Update):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel"""
    user_id = str(update.effective_user.id)

    df = pd.DataFrame(user_expenses[user_id])
    df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y')
    (max_row, max_col) = df.shape
    file_path = 'statistics.xlsx'
    
    writer = pd.ExcelWriter(file_path, engine='xlsxwriter', date_format='dd.mm.yyyy', datetime_format='dd.mm.yyyy')

    df.to_excel(writer, sheet_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", index=False)

    ws = writer.sheets['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
    ws.autofilter(0, 0, max_row, max_col-1)
    ws.autofit()

    writer.close()

    with open(file_path, 'rb') as file:
        await update.message.reply_document(document=file, filename='statistics.xlsx')

async def error_handler(_: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(API_KEY).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    while(True):
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            app.run_polling()
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞, {e}")
